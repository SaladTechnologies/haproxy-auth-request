varnishtest "Verify that arbitrary response headers are exposed."
feature ignore_unknown_macro

server s1 {
    rxreq
    txresp
} -repeat 4 -start

server s_auth_backend {
    rxreq
    txresp \
        -status 200 \
        -hdr "content-type: text/plain" \
        -hdr "x-authenticated-email: guest@example.com" \
        -hdr "x-authenticated-user: guest"

    accept
    rxreq
    txresp \
        -status 200 \
        -hdr "x-authenticated-user: root"

    accept
    rxreq
    txresp \
        -status 200 \
        -hdr "content-type: text/plain" \
        -hdr "x-authenticated-email: root@example.com" \
        -hdr "x-authenticated-user: root"

    accept
    rxreq
    txresp \
        -status 200 \
        -hdr "content-type: text/plain" \
        -hdr "x-authenticated-email: root@example.com" \
        -hdr "x-authenticated-email: root@example.net" \
        -hdr "x-authenticated-user: root"
} -start

haproxy h1 -conf {
    global
        lua-prepend-path ${testdir}/../?/http.lua
        lua-load ${testdir}/../auth-request.lua

    listen fe1
        mode http
        bind "fd@${fe1}"

        http-request lua.auth-request auth_backend /allow
        http-request deny unless { var(req.auth_response_header.x_authenticated_user) root }

        http-request set-header x-echo "%[var(req.auth_response_header.content_type)]|%[var(req.auth_response_header.x_authenticated_user)]|%[var(req.auth_response_header.x_authenticated_email)]"
        http-request set-var(txn.echo) req.fhdr(x-echo)

        http-response set-header x-echo %[var(txn.echo)]

        server s1 ${s1_addr}:${s1_port}

    backend auth_backend
        mode http
        server auth_backend ${s_auth_backend_addr}:${s_auth_backend_port}
} -start

client c1 -connect ${h1_fe1_sock} {
    txreq
    rxresp
    expect resp.status == 403
} -run

client c2 -connect ${h1_fe1_sock} {
    txreq
    rxresp
    expect resp.status == 200
    expect resp.http.x-echo == "|root|"
    txreq
    rxresp
    expect resp.status == 200
    expect resp.http.x-echo == "text/plain|root|root@example.com"
    txreq
    rxresp
    expect resp.status == 200
    expect resp.http.x-echo == "text/plain|root|root@example.com,root@example.net"
} -run
